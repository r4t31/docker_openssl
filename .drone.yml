---
kind: pipeline
name: AFTER_COMPAQ_PATCH

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:AFTER_COMPAQ_PATCH
        --file dockerfiles/AFTER_COMPAQ_PATCH/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:AFTER_COMPAQ_PATCH
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:AFTER_COMPAQ_PATCH
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: BEFORE_COMPAQ_PATCH

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:BEFORE_COMPAQ_PATCH
        --file dockerfiles/BEFORE_COMPAQ_PATCH/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:BEFORE_COMPAQ_PATCH
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:BEFORE_COMPAQ_PATCH
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: BEFORE_engine

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:BEFORE_engine
        --file dockerfiles/BEFORE_engine/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:BEFORE_engine
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:BEFORE_engine
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: BEN_FIPS_TEST_1

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:BEN_FIPS_TEST_1
        --file dockerfiles/BEN_FIPS_TEST_1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:BEN_FIPS_TEST_1
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:BEN_FIPS_TEST_1
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: BEN_FIPS_TEST_2

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:BEN_FIPS_TEST_2
        --file dockerfiles/BEN_FIPS_TEST_2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:BEN_FIPS_TEST_2
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:BEN_FIPS_TEST_2
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: BEN_FIPS_TEST_3

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:BEN_FIPS_TEST_3
        --file dockerfiles/BEN_FIPS_TEST_3/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:BEN_FIPS_TEST_3
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:BEN_FIPS_TEST_3
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: BEN_FIPS_TEST_4

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:BEN_FIPS_TEST_4
        --file dockerfiles/BEN_FIPS_TEST_4/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:BEN_FIPS_TEST_4
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:BEN_FIPS_TEST_4
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: BEN_FIPS_TEST_5

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:BEN_FIPS_TEST_5
        --file dockerfiles/BEN_FIPS_TEST_5/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:BEN_FIPS_TEST_5
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:BEN_FIPS_TEST_5
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: BEN_FIPS_TEST_6

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:BEN_FIPS_TEST_6
        --file dockerfiles/BEN_FIPS_TEST_6/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:BEN_FIPS_TEST_6
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:BEN_FIPS_TEST_6
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: BEN_FIPS_TEST_7

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:BEN_FIPS_TEST_7
        --file dockerfiles/BEN_FIPS_TEST_7/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:BEN_FIPS_TEST_7
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:BEN_FIPS_TEST_7
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: BEN_FIPS_TEST_8

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:BEN_FIPS_TEST_8
        --file dockerfiles/BEN_FIPS_TEST_8/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:BEN_FIPS_TEST_8
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:BEN_FIPS_TEST_8
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: FIPS_098_TEST_1

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:FIPS_098_TEST_1
        --file dockerfiles/FIPS_098_TEST_1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:FIPS_098_TEST_1
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:FIPS_098_TEST_1
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: FIPS_098_TEST_2

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:FIPS_098_TEST_2
        --file dockerfiles/FIPS_098_TEST_2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:FIPS_098_TEST_2
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:FIPS_098_TEST_2
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: FIPS_098_TEST_3

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:FIPS_098_TEST_3
        --file dockerfiles/FIPS_098_TEST_3/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:FIPS_098_TEST_3
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:FIPS_098_TEST_3
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: FIPS_098_TEST_4

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:FIPS_098_TEST_4
        --file dockerfiles/FIPS_098_TEST_4/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:FIPS_098_TEST_4
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:FIPS_098_TEST_4
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: FIPS_098_TEST_5

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:FIPS_098_TEST_5
        --file dockerfiles/FIPS_098_TEST_5/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:FIPS_098_TEST_5
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:FIPS_098_TEST_5
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: FIPS_098_TEST_6

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:FIPS_098_TEST_6
        --file dockerfiles/FIPS_098_TEST_6/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:FIPS_098_TEST_6
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:FIPS_098_TEST_6
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: FIPS_098_TEST_7

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:FIPS_098_TEST_7
        --file dockerfiles/FIPS_098_TEST_7/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:FIPS_098_TEST_7
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:FIPS_098_TEST_7
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: FIPS_098_TEST_8

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:FIPS_098_TEST_8
        --file dockerfiles/FIPS_098_TEST_8/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:FIPS_098_TEST_8
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:FIPS_098_TEST_8
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: FIPS_TEST_10

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:FIPS_TEST_10
        --file dockerfiles/FIPS_TEST_10/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:FIPS_TEST_10
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:FIPS_TEST_10
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: FIPS_TEST_9

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:FIPS_TEST_9
        --file dockerfiles/FIPS_TEST_9/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:FIPS_TEST_9
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:FIPS_TEST_9
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: LEVITTE_after_const

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:LEVITTE_after_const
        --file dockerfiles/LEVITTE_after_const/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:LEVITTE_after_const
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:LEVITTE_after_const
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: LEVITTE_before_const

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:LEVITTE_before_const
        --file dockerfiles/LEVITTE_before_const/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:LEVITTE_before_const
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:LEVITTE_before_const
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-engine-0_9_6

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-engine-0_9_6
        --file dockerfiles/OpenSSL-engine-0_9_6/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-engine-0_9_6
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-engine-0_9_6
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-engine-0_9_6-beta1

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-engine-0_9_6-beta1
        --file dockerfiles/OpenSSL-engine-0_9_6-beta1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-engine-0_9_6-beta1
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-engine-0_9_6-beta1
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-engine-0_9_6-beta2

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-engine-0_9_6-beta2
        --file dockerfiles/OpenSSL-engine-0_9_6-beta2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-engine-0_9_6-beta2
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-engine-0_9_6-beta2
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-engine-0_9_6-beta3

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-engine-0_9_6-beta3
        --file dockerfiles/OpenSSL-engine-0_9_6-beta3/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-engine-0_9_6-beta3
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-engine-0_9_6-beta3
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-engine-0_9_6a

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-engine-0_9_6a
        --file dockerfiles/OpenSSL-engine-0_9_6a/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-engine-0_9_6a
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-engine-0_9_6a
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-engine-0_9_6a-beta1

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-engine-0_9_6a-beta1
        --file dockerfiles/OpenSSL-engine-0_9_6a-beta1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-engine-0_9_6a-beta1
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-engine-0_9_6a-beta1
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-engine-0_9_6a-beta2

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-engine-0_9_6a-beta2
        --file dockerfiles/OpenSSL-engine-0_9_6a-beta2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-engine-0_9_6a-beta2
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-engine-0_9_6a-beta2
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-engine-0_9_6a-beta3

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-engine-0_9_6a-beta3
        --file dockerfiles/OpenSSL-engine-0_9_6a-beta3/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-engine-0_9_6a-beta3
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-engine-0_9_6a-beta3
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-engine-0_9_6b

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-engine-0_9_6b
        --file dockerfiles/OpenSSL-engine-0_9_6b/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-engine-0_9_6b
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-engine-0_9_6b
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-engine-0_9_6c

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-engine-0_9_6c
        --file dockerfiles/OpenSSL-engine-0_9_6c/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-engine-0_9_6c
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-engine-0_9_6c
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-engine-0_9_6d

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-engine-0_9_6d
        --file dockerfiles/OpenSSL-engine-0_9_6d/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-engine-0_9_6d
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-engine-0_9_6d
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-engine-0_9_6d-beta1

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-engine-0_9_6d-beta1
        --file dockerfiles/OpenSSL-engine-0_9_6d-beta1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-engine-0_9_6d-beta1
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-engine-0_9_6d-beta1
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-engine-0_9_6e

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-engine-0_9_6e
        --file dockerfiles/OpenSSL-engine-0_9_6e/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-engine-0_9_6e
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-engine-0_9_6e
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-engine-0_9_6f

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-engine-0_9_6f
        --file dockerfiles/OpenSSL-engine-0_9_6f/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-engine-0_9_6f
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-engine-0_9_6f
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-engine-0_9_6g

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-engine-0_9_6g
        --file dockerfiles/OpenSSL-engine-0_9_6g/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-engine-0_9_6g
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-engine-0_9_6g
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-engine-0_9_6h

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-engine-0_9_6h
        --file dockerfiles/OpenSSL-engine-0_9_6h/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-engine-0_9_6h
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-engine-0_9_6h
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-engine-0_9_6i

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-engine-0_9_6i
        --file dockerfiles/OpenSSL-engine-0_9_6i/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-engine-0_9_6i
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-engine-0_9_6i
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-engine-0_9_6j

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-engine-0_9_6j
        --file dockerfiles/OpenSSL-engine-0_9_6j/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-engine-0_9_6j
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-engine-0_9_6j
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-engine-0_9_6k

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-engine-0_9_6k
        --file dockerfiles/OpenSSL-engine-0_9_6k/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-engine-0_9_6k
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-engine-0_9_6k
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-engine-0_9_6l

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-engine-0_9_6l
        --file dockerfiles/OpenSSL-engine-0_9_6l/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-engine-0_9_6l
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-engine-0_9_6l
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-engine-0_9_6m

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-engine-0_9_6m
        --file dockerfiles/OpenSSL-engine-0_9_6m/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-engine-0_9_6m
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-engine-0_9_6m
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-fips-1_2_0

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-fips-1_2_0
        --file dockerfiles/OpenSSL-fips-1_2_0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-fips-1_2_0
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-fips-1_2_0
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-fips-1_2_1

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-fips-1_2_1
        --file dockerfiles/OpenSSL-fips-1_2_1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-fips-1_2_1
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-fips-1_2_1
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-fips-1_2_2

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-fips-1_2_2
        --file dockerfiles/OpenSSL-fips-1_2_2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-fips-1_2_2
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-fips-1_2_2
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-fips-1_2_3

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-fips-1_2_3
        --file dockerfiles/OpenSSL-fips-1_2_3/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-fips-1_2_3
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-fips-1_2_3
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-fips-2_0

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-fips-2_0
        --file dockerfiles/OpenSSL-fips-2_0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-fips-2_0
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-fips-2_0
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-fips-2_0-pl1

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-fips-2_0-pl1
        --file dockerfiles/OpenSSL-fips-2_0-pl1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-fips-2_0-pl1
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-fips-2_0-pl1
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-fips-2_0-rc1

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-fips-2_0-rc1
        --file dockerfiles/OpenSSL-fips-2_0-rc1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-fips-2_0-rc1
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-fips-2_0-rc1
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-fips-2_0-rc2

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-fips-2_0-rc2
        --file dockerfiles/OpenSSL-fips-2_0-rc2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-fips-2_0-rc2
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-fips-2_0-rc2
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-fips-2_0-rc3

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-fips-2_0-rc3
        --file dockerfiles/OpenSSL-fips-2_0-rc3/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-fips-2_0-rc3
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-fips-2_0-rc3
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-fips-2_0-rc4

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-fips-2_0-rc4
        --file dockerfiles/OpenSSL-fips-2_0-rc4/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-fips-2_0-rc4
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-fips-2_0-rc4
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-fips-2_0-rc5

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-fips-2_0-rc5
        --file dockerfiles/OpenSSL-fips-2_0-rc5/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-fips-2_0-rc5
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-fips-2_0-rc5
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-fips-2_0-rc6

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-fips-2_0-rc6
        --file dockerfiles/OpenSSL-fips-2_0-rc6/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-fips-2_0-rc6
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-fips-2_0-rc6
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-fips-2_0-rc7

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-fips-2_0-rc7
        --file dockerfiles/OpenSSL-fips-2_0-rc7/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-fips-2_0-rc7
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-fips-2_0-rc7
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-fips-2_0-rc8

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-fips-2_0-rc8
        --file dockerfiles/OpenSSL-fips-2_0-rc8/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-fips-2_0-rc8
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-fips-2_0-rc8
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-fips-2_0-rc9

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-fips-2_0-rc9
        --file dockerfiles/OpenSSL-fips-2_0-rc9/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-fips-2_0-rc9
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-fips-2_0-rc9
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-fips-2_0_1

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-fips-2_0_1
        --file dockerfiles/OpenSSL-fips-2_0_1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-fips-2_0_1
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-fips-2_0_1
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-fips-2_0_10

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-fips-2_0_10
        --file dockerfiles/OpenSSL-fips-2_0_10/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-fips-2_0_10
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-fips-2_0_10
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-fips-2_0_11

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-fips-2_0_11
        --file dockerfiles/OpenSSL-fips-2_0_11/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-fips-2_0_11
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-fips-2_0_11
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-fips-2_0_12

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-fips-2_0_12
        --file dockerfiles/OpenSSL-fips-2_0_12/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-fips-2_0_12
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-fips-2_0_12
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-fips-2_0_13

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-fips-2_0_13
        --file dockerfiles/OpenSSL-fips-2_0_13/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-fips-2_0_13
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-fips-2_0_13
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-fips-2_0_14

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-fips-2_0_14
        --file dockerfiles/OpenSSL-fips-2_0_14/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-fips-2_0_14
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-fips-2_0_14
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-fips-2_0_15

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-fips-2_0_15
        --file dockerfiles/OpenSSL-fips-2_0_15/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-fips-2_0_15
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-fips-2_0_15
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-fips-2_0_16

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-fips-2_0_16
        --file dockerfiles/OpenSSL-fips-2_0_16/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-fips-2_0_16
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-fips-2_0_16
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-fips-2_0_2

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-fips-2_0_2
        --file dockerfiles/OpenSSL-fips-2_0_2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-fips-2_0_2
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-fips-2_0_2
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-fips-2_0_3

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-fips-2_0_3
        --file dockerfiles/OpenSSL-fips-2_0_3/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-fips-2_0_3
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-fips-2_0_3
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-fips-2_0_4

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-fips-2_0_4
        --file dockerfiles/OpenSSL-fips-2_0_4/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-fips-2_0_4
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-fips-2_0_4
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-fips-2_0_5

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-fips-2_0_5
        --file dockerfiles/OpenSSL-fips-2_0_5/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-fips-2_0_5
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-fips-2_0_5
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-fips-2_0_6

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-fips-2_0_6
        --file dockerfiles/OpenSSL-fips-2_0_6/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-fips-2_0_6
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-fips-2_0_6
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-fips-2_0_7

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-fips-2_0_7
        --file dockerfiles/OpenSSL-fips-2_0_7/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-fips-2_0_7
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-fips-2_0_7
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-fips-2_0_8

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-fips-2_0_8
        --file dockerfiles/OpenSSL-fips-2_0_8/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-fips-2_0_8
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-fips-2_0_8
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL-fips-2_0_9

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL-fips-2_0_9
        --file dockerfiles/OpenSSL-fips-2_0_9/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL-fips-2_0_9
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL-fips-2_0_9
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_1c

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_1c
        --file dockerfiles/OpenSSL_0_9_1c/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_1c
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_1c
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_2b

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_2b
        --file dockerfiles/OpenSSL_0_9_2b/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_2b
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_2b
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_3

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_3
        --file dockerfiles/OpenSSL_0_9_3/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_3
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_3
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_3a

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_3a
        --file dockerfiles/OpenSSL_0_9_3a/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_3a
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_3a
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_3beta1

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_3beta1
        --file dockerfiles/OpenSSL_0_9_3beta1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_3beta1
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_3beta1
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_3beta2

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_3beta2
        --file dockerfiles/OpenSSL_0_9_3beta2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_3beta2
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_3beta2
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_4

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_4
        --file dockerfiles/OpenSSL_0_9_4/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_4
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_4
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_5

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_5
        --file dockerfiles/OpenSSL_0_9_5/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_5
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_5
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_5a

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_5a
        --file dockerfiles/OpenSSL_0_9_5a/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_5a
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_5a
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_5a-beta1

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_5a-beta1
        --file dockerfiles/OpenSSL_0_9_5a-beta1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_5a-beta1
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_5a-beta1
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_5a-beta2

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_5a-beta2
        --file dockerfiles/OpenSSL_0_9_5a-beta2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_5a-beta2
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_5a-beta2
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_5beta1

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_5beta1
        --file dockerfiles/OpenSSL_0_9_5beta1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_5beta1
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_5beta1
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_5beta2

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_5beta2
        --file dockerfiles/OpenSSL_0_9_5beta2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_5beta2
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_5beta2
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_6

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_6
        --file dockerfiles/OpenSSL_0_9_6/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_6
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_6
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_6-beta1

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_6-beta1
        --file dockerfiles/OpenSSL_0_9_6-beta1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_6-beta1
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_6-beta1
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_6-beta2

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_6-beta2
        --file dockerfiles/OpenSSL_0_9_6-beta2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_6-beta2
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_6-beta2
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_6-beta3

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_6-beta3
        --file dockerfiles/OpenSSL_0_9_6-beta3/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_6-beta3
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_6-beta3
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_6a

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_6a
        --file dockerfiles/OpenSSL_0_9_6a/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_6a
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_6a
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_6a-beta1

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_6a-beta1
        --file dockerfiles/OpenSSL_0_9_6a-beta1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_6a-beta1
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_6a-beta1
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_6a-beta2

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_6a-beta2
        --file dockerfiles/OpenSSL_0_9_6a-beta2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_6a-beta2
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_6a-beta2
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_6a-beta3

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_6a-beta3
        --file dockerfiles/OpenSSL_0_9_6a-beta3/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_6a-beta3
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_6a-beta3
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_6b

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_6b
        --file dockerfiles/OpenSSL_0_9_6b/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_6b
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_6b
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_6c

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_6c
        --file dockerfiles/OpenSSL_0_9_6c/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_6c
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_6c
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_6d

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_6d
        --file dockerfiles/OpenSSL_0_9_6d/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_6d
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_6d
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_6d-beta1

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_6d-beta1
        --file dockerfiles/OpenSSL_0_9_6d-beta1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_6d-beta1
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_6d-beta1
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_6e

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_6e
        --file dockerfiles/OpenSSL_0_9_6e/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_6e
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_6e
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_6f

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_6f
        --file dockerfiles/OpenSSL_0_9_6f/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_6f
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_6f
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_6g

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_6g
        --file dockerfiles/OpenSSL_0_9_6g/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_6g
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_6g
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_6h

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_6h
        --file dockerfiles/OpenSSL_0_9_6h/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_6h
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_6h
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_6i

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_6i
        --file dockerfiles/OpenSSL_0_9_6i/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_6i
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_6i
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_6j

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_6j
        --file dockerfiles/OpenSSL_0_9_6j/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_6j
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_6j
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_6k

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_6k
        --file dockerfiles/OpenSSL_0_9_6k/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_6k
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_6k
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_6l

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_6l
        --file dockerfiles/OpenSSL_0_9_6l/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_6l
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_6l
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_6m

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_6m
        --file dockerfiles/OpenSSL_0_9_6m/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_6m
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_6m
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_7

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_7
        --file dockerfiles/OpenSSL_0_9_7/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_7
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_7
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_7-beta1

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_7-beta1
        --file dockerfiles/OpenSSL_0_9_7-beta1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_7-beta1
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_7-beta1
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_7-beta2

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_7-beta2
        --file dockerfiles/OpenSSL_0_9_7-beta2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_7-beta2
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_7-beta2
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_7-beta3

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_7-beta3
        --file dockerfiles/OpenSSL_0_9_7-beta3/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_7-beta3
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_7-beta3
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_7-beta4

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_7-beta4
        --file dockerfiles/OpenSSL_0_9_7-beta4/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_7-beta4
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_7-beta4
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_7-beta5

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_7-beta5
        --file dockerfiles/OpenSSL_0_9_7-beta5/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_7-beta5
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_7-beta5
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_7-beta6

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_7-beta6
        --file dockerfiles/OpenSSL_0_9_7-beta6/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_7-beta6
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_7-beta6
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_7a

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_7a
        --file dockerfiles/OpenSSL_0_9_7a/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_7a
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_7a
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_7b

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_7b
        --file dockerfiles/OpenSSL_0_9_7b/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_7b
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_7b
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_7c

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_7c
        --file dockerfiles/OpenSSL_0_9_7c/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_7c
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_7c
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_7d

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_7d
        --file dockerfiles/OpenSSL_0_9_7d/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_7d
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_7d
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_7e

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_7e
        --file dockerfiles/OpenSSL_0_9_7e/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_7e
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_7e
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_7f

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_7f
        --file dockerfiles/OpenSSL_0_9_7f/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_7f
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_7f
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_7g

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_7g
        --file dockerfiles/OpenSSL_0_9_7g/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_7g
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_7g
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_7h

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_7h
        --file dockerfiles/OpenSSL_0_9_7h/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_7h
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_7h
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_7i

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_7i
        --file dockerfiles/OpenSSL_0_9_7i/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_7i
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_7i
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_7j

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_7j
        --file dockerfiles/OpenSSL_0_9_7j/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_7j
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_7j
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_7k

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_7k
        --file dockerfiles/OpenSSL_0_9_7k/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_7k
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_7k
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_7l

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_7l
        --file dockerfiles/OpenSSL_0_9_7l/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_7l
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_7l
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_7m

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_7m
        --file dockerfiles/OpenSSL_0_9_7m/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_7m
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_7m
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8
        --file dockerfiles/OpenSSL_0_9_8/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8-beta1

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8-beta1
        --file dockerfiles/OpenSSL_0_9_8-beta1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8-beta1
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8-beta1
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8-beta2

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8-beta2
        --file dockerfiles/OpenSSL_0_9_8-beta2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8-beta2
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8-beta2
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8-beta3

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8-beta3
        --file dockerfiles/OpenSSL_0_9_8-beta3/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8-beta3
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8-beta3
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8-beta4

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8-beta4
        --file dockerfiles/OpenSSL_0_9_8-beta4/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8-beta4
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8-beta4
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8-beta5

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8-beta5
        --file dockerfiles/OpenSSL_0_9_8-beta5/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8-beta5
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8-beta5
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8-beta6

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8-beta6
        --file dockerfiles/OpenSSL_0_9_8-beta6/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8-beta6
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8-beta6
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8-post-auto-reformat

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8-post-auto-reformat
        --file dockerfiles/OpenSSL_0_9_8-post-auto-reformat/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8-post-auto-reformat
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8-post-auto-reformat
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8-post-reformat

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8-post-reformat
        --file dockerfiles/OpenSSL_0_9_8-post-reformat/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8-post-reformat
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8-post-reformat
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8-pre-auto-reformat

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8-pre-auto-reformat
        --file dockerfiles/OpenSSL_0_9_8-pre-auto-reformat/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8-pre-auto-reformat
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8-pre-auto-reformat
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8-pre-reformat

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8-pre-reformat
        --file dockerfiles/OpenSSL_0_9_8-pre-reformat/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8-pre-reformat
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8-pre-reformat
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8a

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8a
        --file dockerfiles/OpenSSL_0_9_8a/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8a
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8a
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8b

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8b
        --file dockerfiles/OpenSSL_0_9_8b/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8b
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8b
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8c

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8c
        --file dockerfiles/OpenSSL_0_9_8c/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8c
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8c
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8d

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8d
        --file dockerfiles/OpenSSL_0_9_8d/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8d
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8d
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8e

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8e
        --file dockerfiles/OpenSSL_0_9_8e/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8e
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8e
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8f

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8f
        --file dockerfiles/OpenSSL_0_9_8f/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8f
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8f
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8g

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8g
        --file dockerfiles/OpenSSL_0_9_8g/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8g
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8g
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8h

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8h
        --file dockerfiles/OpenSSL_0_9_8h/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8h
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8h
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8i

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8i
        --file dockerfiles/OpenSSL_0_9_8i/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8i
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8i
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8j

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8j
        --file dockerfiles/OpenSSL_0_9_8j/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8j
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8j
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8k

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8k
        --file dockerfiles/OpenSSL_0_9_8k/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8k
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8k
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8l

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8l
        --file dockerfiles/OpenSSL_0_9_8l/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8l
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8l
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8m

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8m
        --file dockerfiles/OpenSSL_0_9_8m/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8m
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8m
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8m-beta1

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8m-beta1
        --file dockerfiles/OpenSSL_0_9_8m-beta1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8m-beta1
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8m-beta1
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8n

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8n
        --file dockerfiles/OpenSSL_0_9_8n/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8n
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8n
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8o

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8o
        --file dockerfiles/OpenSSL_0_9_8o/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8o
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8o
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8p

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8p
        --file dockerfiles/OpenSSL_0_9_8p/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8p
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8p
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8q

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8q
        --file dockerfiles/OpenSSL_0_9_8q/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8q
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8q
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8r

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8r
        --file dockerfiles/OpenSSL_0_9_8r/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8r
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8r
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8s

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8s
        --file dockerfiles/OpenSSL_0_9_8s/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8s
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8s
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8t

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8t
        --file dockerfiles/OpenSSL_0_9_8t/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8t
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8t
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8u

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8u
        --file dockerfiles/OpenSSL_0_9_8u/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8u
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8u
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8v

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8v
        --file dockerfiles/OpenSSL_0_9_8v/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8v
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8v
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8w

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8w
        --file dockerfiles/OpenSSL_0_9_8w/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8w
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8w
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8x

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8x
        --file dockerfiles/OpenSSL_0_9_8x/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8x
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8x
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8y

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8y
        --file dockerfiles/OpenSSL_0_9_8y/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8y
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8y
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8za

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8za
        --file dockerfiles/OpenSSL_0_9_8za/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8za
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8za
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8zb

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8zb
        --file dockerfiles/OpenSSL_0_9_8zb/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8zb
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8zb
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8zc

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8zc
        --file dockerfiles/OpenSSL_0_9_8zc/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8zc
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8zc
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8zd

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8zd
        --file dockerfiles/OpenSSL_0_9_8zd/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8zd
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8zd
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8ze

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8ze
        --file dockerfiles/OpenSSL_0_9_8ze/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8ze
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8ze
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8zf

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8zf
        --file dockerfiles/OpenSSL_0_9_8zf/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8zf
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8zf
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8zg

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8zg
        --file dockerfiles/OpenSSL_0_9_8zg/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8zg
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8zg
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_0_9_8zh

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_0_9_8zh
        --file dockerfiles/OpenSSL_0_9_8zh/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_0_9_8zh
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_0_9_8zh
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_0

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_0
        --file dockerfiles/OpenSSL_1_0_0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_0
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_0
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_0-beta1

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_0-beta1
        --file dockerfiles/OpenSSL_1_0_0-beta1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_0-beta1
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_0-beta1
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_0-beta2

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_0-beta2
        --file dockerfiles/OpenSSL_1_0_0-beta2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_0-beta2
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_0-beta2
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_0-beta3

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_0-beta3
        --file dockerfiles/OpenSSL_1_0_0-beta3/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_0-beta3
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_0-beta3
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_0-beta4

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_0-beta4
        --file dockerfiles/OpenSSL_1_0_0-beta4/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_0-beta4
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_0-beta4
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_0-beta5

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_0-beta5
        --file dockerfiles/OpenSSL_1_0_0-beta5/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_0-beta5
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_0-beta5
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_0-post-auto-reformat

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_0-post-auto-reformat
        --file dockerfiles/OpenSSL_1_0_0-post-auto-reformat/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_0-post-auto-reformat
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_0-post-auto-reformat
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_0-post-reformat

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_0-post-reformat
        --file dockerfiles/OpenSSL_1_0_0-post-reformat/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_0-post-reformat
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_0-post-reformat
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_0-pre-auto-reformat

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_0-pre-auto-reformat
        --file dockerfiles/OpenSSL_1_0_0-pre-auto-reformat/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_0-pre-auto-reformat
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_0-pre-auto-reformat
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_0-pre-reformat

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_0-pre-reformat
        --file dockerfiles/OpenSSL_1_0_0-pre-reformat/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_0-pre-reformat
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_0-pre-reformat
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_0a

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_0a
        --file dockerfiles/OpenSSL_1_0_0a/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_0a
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_0a
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_0b

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_0b
        --file dockerfiles/OpenSSL_1_0_0b/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_0b
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_0b
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_0c

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_0c
        --file dockerfiles/OpenSSL_1_0_0c/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_0c
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_0c
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_0d

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_0d
        --file dockerfiles/OpenSSL_1_0_0d/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_0d
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_0d
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_0e

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_0e
        --file dockerfiles/OpenSSL_1_0_0e/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_0e
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_0e
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_0f

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_0f
        --file dockerfiles/OpenSSL_1_0_0f/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_0f
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_0f
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_0g

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_0g
        --file dockerfiles/OpenSSL_1_0_0g/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_0g
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_0g
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_0h

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_0h
        --file dockerfiles/OpenSSL_1_0_0h/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_0h
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_0h
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_0i

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_0i
        --file dockerfiles/OpenSSL_1_0_0i/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_0i
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_0i
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_0j

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_0j
        --file dockerfiles/OpenSSL_1_0_0j/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_0j
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_0j
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_0k

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_0k
        --file dockerfiles/OpenSSL_1_0_0k/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_0k
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_0k
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_0l

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_0l
        --file dockerfiles/OpenSSL_1_0_0l/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_0l
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_0l
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_0m

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_0m
        --file dockerfiles/OpenSSL_1_0_0m/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_0m
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_0m
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_0n

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_0n
        --file dockerfiles/OpenSSL_1_0_0n/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_0n
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_0n
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_0o

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_0o
        --file dockerfiles/OpenSSL_1_0_0o/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_0o
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_0o
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_0p

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_0p
        --file dockerfiles/OpenSSL_1_0_0p/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_0p
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_0p
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_0q

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_0q
        --file dockerfiles/OpenSSL_1_0_0q/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_0q
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_0q
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_0r

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_0r
        --file dockerfiles/OpenSSL_1_0_0r/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_0r
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_0r
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_0s

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_0s
        --file dockerfiles/OpenSSL_1_0_0s/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_0s
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_0s
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_0t

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_0t
        --file dockerfiles/OpenSSL_1_0_0t/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_0t
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_0t
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_1

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_1
        --file dockerfiles/OpenSSL_1_0_1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_1
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_1
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_1-beta1

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_1-beta1
        --file dockerfiles/OpenSSL_1_0_1-beta1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_1-beta1
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_1-beta1
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_1-beta2

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_1-beta2
        --file dockerfiles/OpenSSL_1_0_1-beta2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_1-beta2
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_1-beta2
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_1-beta3

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_1-beta3
        --file dockerfiles/OpenSSL_1_0_1-beta3/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_1-beta3
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_1-beta3
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_1-post-auto-reformat

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_1-post-auto-reformat
        --file dockerfiles/OpenSSL_1_0_1-post-auto-reformat/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_1-post-auto-reformat
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_1-post-auto-reformat
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_1-post-reformat

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_1-post-reformat
        --file dockerfiles/OpenSSL_1_0_1-post-reformat/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_1-post-reformat
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_1-post-reformat
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_1-pre-auto-reformat

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_1-pre-auto-reformat
        --file dockerfiles/OpenSSL_1_0_1-pre-auto-reformat/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_1-pre-auto-reformat
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_1-pre-auto-reformat
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_1-pre-reformat

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_1-pre-reformat
        --file dockerfiles/OpenSSL_1_0_1-pre-reformat/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_1-pre-reformat
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_1-pre-reformat
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_1a

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_1a
        --file dockerfiles/OpenSSL_1_0_1a/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_1a
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_1a
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_1b

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_1b
        --file dockerfiles/OpenSSL_1_0_1b/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_1b
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_1b
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_1c

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_1c
        --file dockerfiles/OpenSSL_1_0_1c/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_1c
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_1c
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_1d

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_1d
        --file dockerfiles/OpenSSL_1_0_1d/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_1d
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_1d
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_1e

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_1e
        --file dockerfiles/OpenSSL_1_0_1e/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_1e
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_1e
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_1f

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_1f
        --file dockerfiles/OpenSSL_1_0_1f/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_1f
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_1f
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_1g

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_1g
        --file dockerfiles/OpenSSL_1_0_1g/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_1g
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_1g
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_1h

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_1h
        --file dockerfiles/OpenSSL_1_0_1h/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_1h
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_1h
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_1i

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_1i
        --file dockerfiles/OpenSSL_1_0_1i/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_1i
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_1i
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_1j

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_1j
        --file dockerfiles/OpenSSL_1_0_1j/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_1j
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_1j
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_1k

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_1k
        --file dockerfiles/OpenSSL_1_0_1k/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_1k
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_1k
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_1l

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_1l
        --file dockerfiles/OpenSSL_1_0_1l/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_1l
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_1l
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_1m

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_1m
        --file dockerfiles/OpenSSL_1_0_1m/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_1m
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_1m
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_1n

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_1n
        --file dockerfiles/OpenSSL_1_0_1n/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_1n
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_1n
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_1o

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_1o
        --file dockerfiles/OpenSSL_1_0_1o/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_1o
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_1o
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_1p

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_1p
        --file dockerfiles/OpenSSL_1_0_1p/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_1p
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_1p
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_1q

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_1q
        --file dockerfiles/OpenSSL_1_0_1q/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_1q
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_1q
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_1r

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_1r
        --file dockerfiles/OpenSSL_1_0_1r/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_1r
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_1r
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_1s

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_1s
        --file dockerfiles/OpenSSL_1_0_1s/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_1s
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_1s
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_1t

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_1t
        --file dockerfiles/OpenSSL_1_0_1t/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_1t
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_1t
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_1u

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_1u
        --file dockerfiles/OpenSSL_1_0_1u/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_1u
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_1u
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_2

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_2
        --file dockerfiles/OpenSSL_1_0_2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_2
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_2
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_2-beta1

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_2-beta1
        --file dockerfiles/OpenSSL_1_0_2-beta1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_2-beta1
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_2-beta1
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_2-beta2

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_2-beta2
        --file dockerfiles/OpenSSL_1_0_2-beta2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_2-beta2
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_2-beta2
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_2-beta3

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_2-beta3
        --file dockerfiles/OpenSSL_1_0_2-beta3/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_2-beta3
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_2-beta3
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_2-post-auto-reformat

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_2-post-auto-reformat
        --file dockerfiles/OpenSSL_1_0_2-post-auto-reformat/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_2-post-auto-reformat
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_2-post-auto-reformat
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_2-post-reformat

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_2-post-reformat
        --file dockerfiles/OpenSSL_1_0_2-post-reformat/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_2-post-reformat
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_2-post-reformat
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_2-pre-auto-reformat

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_2-pre-auto-reformat
        --file dockerfiles/OpenSSL_1_0_2-pre-auto-reformat/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_2-pre-auto-reformat
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_2-pre-auto-reformat
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_2-pre-reformat

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_2-pre-reformat
        --file dockerfiles/OpenSSL_1_0_2-pre-reformat/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_2-pre-reformat
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_2-pre-reformat
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_2a

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_2a
        --file dockerfiles/OpenSSL_1_0_2a/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_2a
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_2a
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_2b

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_2b
        --file dockerfiles/OpenSSL_1_0_2b/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_2b
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_2b
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_2c

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_2c
        --file dockerfiles/OpenSSL_1_0_2c/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_2c
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_2c
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_2d

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_2d
        --file dockerfiles/OpenSSL_1_0_2d/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_2d
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_2d
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_2e

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_2e
        --file dockerfiles/OpenSSL_1_0_2e/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_2e
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_2e
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_2f

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_2f
        --file dockerfiles/OpenSSL_1_0_2f/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_2f
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_2f
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_2g

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_2g
        --file dockerfiles/OpenSSL_1_0_2g/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_2g
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_2g
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_2h

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_2h
        --file dockerfiles/OpenSSL_1_0_2h/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_2h
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_2h
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_2i

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_2i
        --file dockerfiles/OpenSSL_1_0_2i/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_2i
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_2i
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_2j

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_2j
        --file dockerfiles/OpenSSL_1_0_2j/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_2j
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_2j
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_2k

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_2k
        --file dockerfiles/OpenSSL_1_0_2k/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_2k
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_2k
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_2l

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_2l
        --file dockerfiles/OpenSSL_1_0_2l/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_2l
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_2l
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_2m

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_2m
        --file dockerfiles/OpenSSL_1_0_2m/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_2m
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_2m
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_2n

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_2n
        --file dockerfiles/OpenSSL_1_0_2n/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_2n
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_2n
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_2o

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_2o
        --file dockerfiles/OpenSSL_1_0_2o/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_2o
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_2o
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_2p

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_2p
        --file dockerfiles/OpenSSL_1_0_2p/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_2p
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_2p
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_2q

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_2q
        --file dockerfiles/OpenSSL_1_0_2q/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_2q
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_2q
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_2r

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_2r
        --file dockerfiles/OpenSSL_1_0_2r/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_2r
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_2r
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_2s

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_2s
        --file dockerfiles/OpenSSL_1_0_2s/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_2s
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_2s
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_2t

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_2t
        --file dockerfiles/OpenSSL_1_0_2t/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_2t
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_2t
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_0_2u

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_0_2u
        --file dockerfiles/OpenSSL_1_0_2u/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_0_2u
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_0_2u
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_1_0

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_1_0
        --file dockerfiles/OpenSSL_1_1_0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_1_0
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_1_0
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_1_0-pre1

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_1_0-pre1
        --file dockerfiles/OpenSSL_1_1_0-pre1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_1_0-pre1
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_1_0-pre1
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_1_0-pre2

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_1_0-pre2
        --file dockerfiles/OpenSSL_1_1_0-pre2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_1_0-pre2
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_1_0-pre2
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_1_0-pre3

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_1_0-pre3
        --file dockerfiles/OpenSSL_1_1_0-pre3/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_1_0-pre3
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_1_0-pre3
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_1_0-pre4

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_1_0-pre4
        --file dockerfiles/OpenSSL_1_1_0-pre4/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_1_0-pre4
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_1_0-pre4
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_1_0-pre5

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_1_0-pre5
        --file dockerfiles/OpenSSL_1_1_0-pre5/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_1_0-pre5
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_1_0-pre5
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_1_0-pre6

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_1_0-pre6
        --file dockerfiles/OpenSSL_1_1_0-pre6/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_1_0-pre6
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_1_0-pre6
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_1_0a

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_1_0a
        --file dockerfiles/OpenSSL_1_1_0a/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_1_0a
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_1_0a
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_1_0b

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_1_0b
        --file dockerfiles/OpenSSL_1_1_0b/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_1_0b
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_1_0b
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_1_0c

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_1_0c
        --file dockerfiles/OpenSSL_1_1_0c/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_1_0c
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_1_0c
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_1_0d

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_1_0d
        --file dockerfiles/OpenSSL_1_1_0d/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_1_0d
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_1_0d
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_1_0e

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_1_0e
        --file dockerfiles/OpenSSL_1_1_0e/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_1_0e
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_1_0e
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_1_0f

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_1_0f
        --file dockerfiles/OpenSSL_1_1_0f/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_1_0f
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_1_0f
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_1_0g

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_1_0g
        --file dockerfiles/OpenSSL_1_1_0g/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_1_0g
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_1_0g
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_1_0h

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_1_0h
        --file dockerfiles/OpenSSL_1_1_0h/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_1_0h
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_1_0h
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_1_0i

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_1_0i
        --file dockerfiles/OpenSSL_1_1_0i/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_1_0i
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_1_0i
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_1_0j

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_1_0j
        --file dockerfiles/OpenSSL_1_1_0j/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_1_0j
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_1_0j
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_1_0k

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_1_0k
        --file dockerfiles/OpenSSL_1_1_0k/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_1_0k
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_1_0k
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_1_0l

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_1_0l
        --file dockerfiles/OpenSSL_1_1_0l/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_1_0l
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_1_0l
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_1_1

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_1_1
        --file dockerfiles/OpenSSL_1_1_1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_1_1
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_1_1
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_1_1-pre1

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_1_1-pre1
        --file dockerfiles/OpenSSL_1_1_1-pre1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_1_1-pre1
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_1_1-pre1
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_1_1-pre2

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_1_1-pre2
        --file dockerfiles/OpenSSL_1_1_1-pre2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_1_1-pre2
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_1_1-pre2
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_1_1-pre3

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_1_1-pre3
        --file dockerfiles/OpenSSL_1_1_1-pre3/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_1_1-pre3
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_1_1-pre3
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_1_1-pre4

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_1_1-pre4
        --file dockerfiles/OpenSSL_1_1_1-pre4/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_1_1-pre4
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_1_1-pre4
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_1_1-pre5

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_1_1-pre5
        --file dockerfiles/OpenSSL_1_1_1-pre5/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_1_1-pre5
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_1_1-pre5
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_1_1-pre6

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_1_1-pre6
        --file dockerfiles/OpenSSL_1_1_1-pre6/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_1_1-pre6
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_1_1-pre6
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_1_1-pre7

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_1_1-pre7
        --file dockerfiles/OpenSSL_1_1_1-pre7/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_1_1-pre7
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_1_1-pre7
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_1_1-pre8

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_1_1-pre8
        --file dockerfiles/OpenSSL_1_1_1-pre8/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_1_1-pre8
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_1_1-pre8
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_1_1-pre9

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_1_1-pre9
        --file dockerfiles/OpenSSL_1_1_1-pre9/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_1_1-pre9
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_1_1-pre9
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_1_1a

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_1_1a
        --file dockerfiles/OpenSSL_1_1_1a/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_1_1a
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_1_1a
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_1_1b

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_1_1b
        --file dockerfiles/OpenSSL_1_1_1b/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_1_1b
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_1_1b
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_1_1c

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_1_1c
        --file dockerfiles/OpenSSL_1_1_1c/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_1_1c
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_1_1c
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_1_1d

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_1_1d
        --file dockerfiles/OpenSSL_1_1_1d/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_1_1d
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_1_1d
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_1_1e

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_1_1e
        --file dockerfiles/OpenSSL_1_1_1e/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_1_1e
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_1_1e
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_1_1f

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_1_1f
        --file dockerfiles/OpenSSL_1_1_1f/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_1_1f
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_1_1f
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_1_1g

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_1_1g
        --file dockerfiles/OpenSSL_1_1_1g/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_1_1g
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_1_1g
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_1_1h

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_1_1h
        --file dockerfiles/OpenSSL_1_1_1h/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_1_1h
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_1_1h
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_1_1i

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_1_1i
        --file dockerfiles/OpenSSL_1_1_1i/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_1_1i
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_1_1i
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_1_1j

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_1_1j
        --file dockerfiles/OpenSSL_1_1_1j/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_1_1j
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_1_1j
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_1_1_1k

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_1_1_1k
        --file dockerfiles/OpenSSL_1_1_1k/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_1_1_1k
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_1_1_1k
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: OpenSSL_FIPS_1_0

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:OpenSSL_FIPS_1_0
        --file dockerfiles/OpenSSL_FIPS_1_0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:OpenSSL_FIPS_1_0
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:OpenSSL_FIPS_1_0
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: SSLeay_0_8_1b

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:SSLeay_0_8_1b
        --file dockerfiles/SSLeay_0_8_1b/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:SSLeay_0_8_1b
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:SSLeay_0_8_1b
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: SSLeay_0_9_0b

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:SSLeay_0_9_0b
        --file dockerfiles/SSLeay_0_9_0b/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:SSLeay_0_9_0b
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:SSLeay_0_9_0b
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: SSLeay_0_9_1b

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:SSLeay_0_9_1b
        --file dockerfiles/SSLeay_0_9_1b/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:SSLeay_0_9_1b
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:SSLeay_0_9_1b
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: STATE_after_zlib

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:STATE_after_zlib
        --file dockerfiles/STATE_after_zlib/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:STATE_after_zlib
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:STATE_after_zlib
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: STATE_before_zlib

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:STATE_before_zlib
        --file dockerfiles/STATE_before_zlib/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:STATE_before_zlib
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:STATE_before_zlib
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: master-post-auto-reformat

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:master-post-auto-reformat
        --file dockerfiles/master-post-auto-reformat/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:master-post-auto-reformat
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:master-post-auto-reformat
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: master-post-reformat

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:master-post-reformat
        --file dockerfiles/master-post-reformat/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:master-post-reformat
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:master-post-reformat
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: master-pre-auto-reformat

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:master-pre-auto-reformat
        --file dockerfiles/master-pre-auto-reformat/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:master-pre-auto-reformat
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:master-pre-auto-reformat
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: master-pre-reformat

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:master-pre-reformat
        --file dockerfiles/master-pre-reformat/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:master-pre-reformat
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:master-pre-reformat
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: openssl-3.0.0-alpha1

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:openssl-3.0.0-alpha1
        --file dockerfiles/openssl-3.0.0-alpha1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:openssl-3.0.0-alpha1
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:openssl-3.0.0-alpha1
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: openssl-3.0.0-alpha10

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:openssl-3.0.0-alpha10
        --file dockerfiles/openssl-3.0.0-alpha10/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:openssl-3.0.0-alpha10
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:openssl-3.0.0-alpha10
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: openssl-3.0.0-alpha11

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:openssl-3.0.0-alpha11
        --file dockerfiles/openssl-3.0.0-alpha11/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:openssl-3.0.0-alpha11
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:openssl-3.0.0-alpha11
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: openssl-3.0.0-alpha12

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:openssl-3.0.0-alpha12
        --file dockerfiles/openssl-3.0.0-alpha12/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:openssl-3.0.0-alpha12
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:openssl-3.0.0-alpha12
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: openssl-3.0.0-alpha13

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:openssl-3.0.0-alpha13
        --file dockerfiles/openssl-3.0.0-alpha13/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:openssl-3.0.0-alpha13
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:openssl-3.0.0-alpha13
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: openssl-3.0.0-alpha14

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:openssl-3.0.0-alpha14
        --file dockerfiles/openssl-3.0.0-alpha14/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:openssl-3.0.0-alpha14
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:openssl-3.0.0-alpha14
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: openssl-3.0.0-alpha15

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:openssl-3.0.0-alpha15
        --file dockerfiles/openssl-3.0.0-alpha15/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:openssl-3.0.0-alpha15
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:openssl-3.0.0-alpha15
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: openssl-3.0.0-alpha16

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:openssl-3.0.0-alpha16
        --file dockerfiles/openssl-3.0.0-alpha16/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:openssl-3.0.0-alpha16
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:openssl-3.0.0-alpha16
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: openssl-3.0.0-alpha17

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:openssl-3.0.0-alpha17
        --file dockerfiles/openssl-3.0.0-alpha17/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:openssl-3.0.0-alpha17
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:openssl-3.0.0-alpha17
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: openssl-3.0.0-alpha2

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:openssl-3.0.0-alpha2
        --file dockerfiles/openssl-3.0.0-alpha2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:openssl-3.0.0-alpha2
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:openssl-3.0.0-alpha2
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: openssl-3.0.0-alpha3

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:openssl-3.0.0-alpha3
        --file dockerfiles/openssl-3.0.0-alpha3/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:openssl-3.0.0-alpha3
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:openssl-3.0.0-alpha3
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: openssl-3.0.0-alpha4

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:openssl-3.0.0-alpha4
        --file dockerfiles/openssl-3.0.0-alpha4/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:openssl-3.0.0-alpha4
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:openssl-3.0.0-alpha4
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: openssl-3.0.0-alpha5

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:openssl-3.0.0-alpha5
        --file dockerfiles/openssl-3.0.0-alpha5/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:openssl-3.0.0-alpha5
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:openssl-3.0.0-alpha5
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: openssl-3.0.0-alpha6

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:openssl-3.0.0-alpha6
        --file dockerfiles/openssl-3.0.0-alpha6/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:openssl-3.0.0-alpha6
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:openssl-3.0.0-alpha6
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: openssl-3.0.0-alpha7

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:openssl-3.0.0-alpha7
        --file dockerfiles/openssl-3.0.0-alpha7/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:openssl-3.0.0-alpha7
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:openssl-3.0.0-alpha7
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: openssl-3.0.0-alpha8

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:openssl-3.0.0-alpha8
        --file dockerfiles/openssl-3.0.0-alpha8/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:openssl-3.0.0-alpha8
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:openssl-3.0.0-alpha8
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: openssl-3.0.0-alpha9

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:openssl-3.0.0-alpha9
        --file dockerfiles/openssl-3.0.0-alpha9/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:openssl-3.0.0-alpha9
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:openssl-3.0.0-alpha9
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# ---
kind: pipeline
name: rsaref

steps:
  - name: ls
    image: docker
    context: ./
    commands:
      - pwd
      - ls -la
      # - ls -la Dockerfile

  # - name: ls2
  #   image: docker
  #   context: ./
  #   commands:
  #     - cd /
  #     - pwd
  #     - ls -la
  #     - cd /certs
  #     - ls -la
  #     - ls -la Dockerfile

    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    context: ./
    commands:
      - docker build .
        --tag r4t31/openssl:rsaref
        --file dockerfiles/rsaref/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/openssl:rsaref
    detach: true

  #

  # - name: verify TLS10
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS10
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS11
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS11
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: verify TLS12
  #   image: r4t31/tlsattackerconnector
  #   commands:
  #     - sleep 5
  #     - connector
  #       --targetHost sut
  #       --protocolVersion TLS12
  #       --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
  #
  #       --merge-application
  #       --test | tee result.log
  #     - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"
  #

  # - name: publish
  #   image: docker
  #   commands:
  #     - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  #     - docker push r4t31/openssl:rsaref
  #   environment:
  #     DOCKER_USERNAME:
  #       from_secret: docker_username
  #     DOCKER_PASSWORD:
  #       from_secret: docker_password

  #   # Give access to host docker, the previously build image is available here.
  #   volumes:
  #     - name: docker
  #       path: /var/run/docker.sock

  #   when:
  #     branch:
  #       - master


# volumes:
#     # Expose host docker to build steps
#   - name: docker
#     host:
#       path: /var/run/docker.sock

# 